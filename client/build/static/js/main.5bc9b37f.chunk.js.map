{"version":3,"sources":["Home.js","Login.js","Secret.js","App.js","serviceWorker.js","index.js"],"names":["Home","to","Login","history","useHistory","onSubmit","event","preventDefault","fetch","method","body","JSON","stringify","email","target","value","password","headers","then","res","status","Error","error","json","data","localStorage","setItem","token","push","catch","err","console","alert","name","type","placeholder","Secret","useState","user","setUser","useEffect","Authorization","getItem","log","App","exact","path","component","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"yRAGaA,EAAO,WAClB,OACE,oCACE,oCACA,2BACE,4BAAI,kBAAC,IAAD,CAAMC,GAAG,UAAT,UACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,WAAT,cCNCC,EAAQ,WACnB,IAAMC,EAAUC,cA+BhB,OACE,oCACE,qCACA,0BAAMC,SAhCO,SAACC,GAChBA,EAAMC,iBACNC,MAAM,aAAc,CAClBC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CACnBC,MAAOP,EAAMQ,OAAOD,MAAME,MAC1BC,SAAUV,EAAMQ,OAAOE,SAASD,QAElCE,QAAS,CACP,eAAgB,sBAGjBC,MAAK,SAACC,GACL,GAAmB,MAAfA,EAAIC,OAON,MADc,IAAIC,MAAMF,EAAIG,OAL5BH,EAAII,OAAOL,MAAK,SAAAM,GACdC,aAAaC,QAAQ,QAASF,EAAKG,UAErCxB,EAAQyB,KAAK,QAMhBC,OAAM,SAACC,GACNC,QAAQT,MAAMQ,GACdE,MAAM,0CAQN,6BACE,uCAEE,2BAAOC,KAAK,QAAQC,KAAK,QAAQC,YAAY,YAGjD,6BACE,0CAEE,2BAAOF,KAAK,WAAWC,KAAK,WAAWC,YAAY,eAGvD,4BAAQD,KAAK,UAAb,a,QCjDKE,EAAS,WAAO,IAAD,EACFC,qBADE,mBACnBC,EADmB,KACbC,EADa,KAoB1B,OAjBAC,qBAAU,WACRhC,MAAM,cAAe,CACnBS,QAAS,CACPwB,cAAe,UAAYhB,aAAaiB,QAAQ,YAGjDxB,MAAK,SAACC,GACL,OAAOA,EAAII,UAEZL,MAAK,SAACoB,GACLC,EAAQD,MAETT,OAAM,SAACC,GACNC,QAAQY,IAAIb,QAEf,IAGD,oCACE,sCACA,2BAAInB,KAAKC,UAAU0B,EAAM,KAAM,MCJtBM,E,uKAZX,OACE,6BACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW/C,IACjC,kBAAC,IAAD,CAAO8C,KAAK,SAASC,UAAW7C,IAChC,kBAAC,IAAD,CAAO4C,KAAK,UAAUC,UAAWX,U,GAPzBY,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3C,MAAK,SAAA4C,GACJA,EAAaC,gBAEdlC,OAAM,SAAAP,GACLS,QAAQT,MAAMA,EAAM0C,c","file":"static/js/main.5bc9b37f.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nexport const Home = () => {\n  return (\n    <>\n      <h1>Home</h1>\n      <u>\n        <li><Link to=\"/login\">Login</Link></li>\n        <li><Link to=\"/secret\">Secret</Link></li>\n      </u>\n    </>\n  );\n};\n","import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nexport const Login = () => {\n  const history = useHistory();\n\n  const onSubmit = (event) => {\n    event.preventDefault();\n    fetch(\"/api/login\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        email: event.target.email.value,\n        password: event.target.password.value,\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    })\n      .then((res) => {\n        if (res.status === 200) {\n          res.json().then(data => {\n            localStorage.setItem('token', data.token)\n          })\n          history.push(\"/\");\n        } else {\n          const error = new Error(res.error);\n          throw error;\n        }\n      })\n      .catch((err) => {\n        console.error(err);\n        alert(\"Error logging in please try again\");\n      });\n  };\n\n  return (\n    <>\n      <h3>Login</h3>\n      <form onSubmit={onSubmit}>\n        <div>\n          <label>\n            Email\n            <input name=\"email\" type=\"email\" placeholder=\"Email\" />\n          </label>\n        </div>\n        <div>\n          <label>\n            Password\n            <input name=\"password\" type=\"password\" placeholder=\"Password\" />\n          </label>\n        </div>\n        <button type=\"submit\">Log in</button>\n      </form>\n    </>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\n\nexport const Secret = () => {\n  const [user, setUser] = useState();\n\n  useEffect(() => {\n    fetch(\"/api/secret\", {\n      headers: {\n        Authorization: \"Bearer \" + localStorage.getItem(\"token\"),\n      },\n    })\n      .then((res) => {\n        return res.json();\n      })\n      .then((user) => {\n        setUser(user);\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  }, []);\n\n  return (\n    <>\n      <h1>Secret</h1>\n      <p>{JSON.stringify(user, null, 2)}</p>\n    </>\n  );\n};\n","import React, { Component } from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport \"./App.css\";\nimport { Home } from \"./Home\";\nimport { Login } from \"./Login\";\nimport { Secret } from \"./Secret\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route path=\"/login\" component={Login} />\n          <Route path=\"/secret\" component={Secret} />\n        </Switch>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}